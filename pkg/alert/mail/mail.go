package mail

import (
	"fmt"
	"github.com/haisum/tcbuildmonitor/pkg/tc/build"
	"time"
)

type mail struct {
	from   string
	domain string
	cc     []string
	mailer Mailer
	store  Store
	gape   int64
}

func (m *mail) Alert(b build.Build) error {
	var to []string

	body := `Hi,

Teamcity build %s in project %s has failed. This failure may have been caused by your changes. Please analyze and fix any issues that may have been caused by your changes.
Build URL: %s.

Status: %s

Changes:

`
	body = fmt.Sprintf(body, b.BuildType.Name, b.BuildType.ProjectName, b.WebURL, b.StatusText)
	body = body + fmt.Sprintf("%-15s %-50s %s\n", "username", "commit", "url")
	for _, change := range b.Change {
		to = appendIfMissing(to, change.Username+"@"+m.domain)
		body = body + fmt.Sprintf("%-15s %-50s %s\n", change.Username, change.Version, change.WebURL)
	}
	subject := fmt.Sprintf("%s : %s Failed", b.BuildType.ProjectName, b.BuildType.Name)
	// if we sent an alert within m.gape seconds, skip alert
	if v, err := m.store.Get(b.ID); err == nil && v > time.Now().Unix()-m.gape {
		return nil
	}
	if len(to) == 0 {
		to = m.cc
		m.cc = make([]string, 0)
		body = fmt.Sprintf("Teamcity build %s in project %s has failed without any changes. URL: %s.", b.BuildType.Name, b.BuildType.ProjectName, b.WebURL)
	}
	body = body + `
This is an automated message generated by TCMONITOR program.

Thanks.
	`
	err := m.mailer.Mail(m.from, subject, body, to, m.cc)
	if err != nil {
		return err
	}
	return m.store.Set(b.ID, time.Now().Unix())
}

type Mailer interface {
	Mail(from, subject, body string, to, cc []string) error
}

type Store interface {
	Set(k int, v int64) error
	Get(k int) (int64, error)
}

func New(mailer Mailer, store Store, gape int64, from string, domain string, cc []string) *mail {
	return &mail{
		from,
		domain,
		cc,
		mailer,
		store,
		gape,
	}
}

func appendIfMissing(slice []string, i string) []string {
	for _, ele := range slice {
		if ele == i {
			return slice
		}
	}
	return append(slice, i)
}
